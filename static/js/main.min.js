function SearchResult(e, o, t, r, n, a, c, l) {
    this.id = e, this.name = o, this.bar_code = t, this.selling_price = r, this.supply_price = n, this.currency = a, this.model = c, this.unit = l
}
function IsSelect(e) {
    this.ids = e || []
}
function AlertSuccess(e, o, t) {
    swal({title: e, type: "success", text: o, confirmButtonText: "确认", showConfirmButton: !0}, function (e) {
        try {
            t()
        } catch (e) {
        }
    })
}
function AlertError(e, o, t) {
    swal({title: e, type: "error", text: o, confirmButtonText: "确认", showConfirmButton: !0}, function (e) {
        try {
            t()
        } catch (e) {
        }
    })
}
function AlertWarn(e, o, t) {
    swal({title: e, type: "warning", text: o, confirmButtonText: "确认", showConfirmButton: !0}, function (e) {
        if (e)try {
            t()
        } catch (e) {
        }
    })
}
function AlertConfirm(e, o, t, r, n) {
    swal({
        title: e,
        text: o,
        type: "warning",
        showCancelButton: !0,
        confirmButtonColor: "#DD6B55",
        confirmButtonText: t,
        cancelButtonText: "取消",
        closeOnConfirm: !1
    }, function (e) {
        if (e) console.log("Confirm"), r(); else try {
            console.log("Confirm"), n()
        } catch (e) {
        }
    })
}
function AjaxReturnZero(e) {
    console.log(e);
    try {
        var o = JSON.parse(e.msg), t = "";
        for (var r in o)t += "<p>订单：" + r + " " + o[r] + "<br></p>";
        swal({title: "操作失败!", type: "error", text: t, confirmButtonText: "确认", cancelButtonText: "取消", showConfirmButton: !0, html: !0}, function (e) {
            e && location.reload(!0)
        })
    } catch (o) {
        o instanceof SyntaxError && (AlertError("操作失败!", e.msg), "验证码错误" == e.msg && $("#verifyImg").click())
    }
}
function formPost(e, o, t) {
    t && $(t).prop("disabled", !0), $.ajax({
        type: "POST", url: o, data: e, success: function (e) {
            t && $(t).prop("disabled", !1), orderApiSuccess(e, "操作成功")
        }, error: function () {
            t && $(t).prop("disabled", !1), AlertError("操作失败!", "网络链接失败 或 服务器错误!", function () {
                location.reload(!0)
            })
        }
    })
}
function originFormPost(e, o, t) {
    return t && $(t).prop("disabled", !0), $.ajax({url: o, type: "POST", data: e, processData: !1, contentType: !1})
}
function isInteger(e) {
    return Math.floor(e) === e
}
function parseDom(e) {
    var o = document.createElement("div");
    return o.innerHTML = e, o.childNodes
}
function parseURL(e) {
    var o = document.createElement("a");
    return o.href = e, {
        source: e,
        protocol: o.protocol.replace(":", ""),
        host: o.hostname,
        port: o.port,
        query: o.search,
        params: function () {
            for (var e, t = {}, r = o.search.replace(/^\?/, "").split("&"), n = r.length, a = 0; a < n; a++)r[a] && (t[(e = r[a].split("="))[0]] = e[1]);
            return t
        }(),
        file: (o.pathname.match(/\/([^\/?#]+)$/i) || [, ""])[1],
        hash: o.hash.replace("#", ""),
        path: o.pathname.replace(/^([^\/])/, "/$1"),
        relative: (o.href.match(/tps?:\/\/[^\/]+(.+)/) || [, ""])[1],
        segments: o.pathname.replace(/^\//, "").split("/")
    }
}
function closeInput(e) {
    var o = $(e), t = $(e).parent(), r = t.find(".inline_amount"), n = t.find(".inline_stock_true_old").text();
    console.log(n);
    var a = Number(o.find("input").val());
    if (console.log(a), "" == o.find("input").val())return $(e).find("input").val(""), r.text(""), $(e).empty(), $(e).bind("click", function () {
        newInput(e)
    }), !1;
    !isInteger(a) || a <= -1 ? ($(e).find("input").val(""), r.text(""), $(e).empty()) : ($(e).empty().text(a), r.text(a - n)), $(e).bind("click", function () {
        newInput(e)
    })
}
function newInput(e) {
    $(e).unbind("click");
    var o = $(e).text();
    $(e).empty(), $("<input>").attr("type", "text").val(o).blur(function () {
        closeInput(e)
    }).keydown(function (o) {
        13 === o.keyCode && closeInput(e)
    }).appendTo($(e)).focus()
}
function ClearTable(e) {
    $(e).nextAll().remove(), addGoodsMark = [], oldMark = []
}
function readURL(e) {
    if (e.files && e.files[0]) {
        var o = new FileReader;
        o.onload = function (e) {
            $("#orderImage").attr("src", e.target.result)
        }, o.readAsDataURL(e.files[0])
    }
}
function currencyQueryBtn() {
    $(".currencyQueryBtn").click(function () {
        window.open("http://www.currencydo.com/")
    })
}
function Trim(e, o) {
    var t;
    return t = e.replace(/(^\s+)|(\s+$)/g, ""), "g" == o.toLowerCase() && (t = t.replace(/\s/g, "")), t
}
function decode(e) {
    return unescape(e.replace(/\\(u[0-9a-fA-F]{4})/gm, "%$1"))
}
function currencyTotalCount(e) {
    function o(e, o, t) {
        return console.log(e + "->" + o + "->" + t), 0 === o || void 0 === o ? "" : t ? "<dt><p>合计</p></dt><dd><p>" + o.toFixed(2) + "&nbsp;&nbsp;" + e + "</p></dd><dt>" : "<dt><p></p></dt><dd><p>" + o.toFixed(2) + "&nbsp;&nbsp;" + e + "</p></dd><dt>"
    }

    function t() {
        $(l).each(function (e, t) {
            var c = t.slice(1);
            console.log(e), $(t).each(function (e, o) {
                var r = t.slice(1), n = Number($(o).text()), a = Number($(o).parent().find("td.amount").text());
                s[r] += a * n, console.log("币种" + r + "单件商品价格是 " + n + "，有" + a + "件，合计" + a * n + r)
            }), "purchase" === r && (0 === e ? n.append(o(c, s[c], !0)) : n.append(o(c, s[c], !1))), "order" === r && (0 === e ? a.append(o(c, s[c], !0)) : a.append(o(c, s[c], !1)))
        })
    }

    var r = e;
    if (null !== r) {
        var n = $("dl.currencyCountInsert.purchase"), a = $("dl.currencyCountInsert.order"), c = [];
        $(".RowCurrency .currency").each(function (e, o) {
            c.push("." + o.innerHTML)
        });
        var l = _.uniq(c);
        console.log(l);
        var s = {CNY: 0, AUD: 0, HKD: 0, NZD: 0};
        "purchase" === r && (console.log("入库单币种统计"), t()), "order" === r && (console.log("订单币种统计"), t())
    } else console.log("不同币种统计没有运行")
}
function buyInGoodsSelete2Init() {
    $(".goodsAddCodeSelect").select2({
        placeholder: "输入 商品名称、条形码 搜索", minimumInputLength: 2, language: "zh-CN", cache: !0, escapeMarkup: function (e) {
            return e
        }, ajax: {
            url: goodsEditSearchUrl, dataType: "json", delay: 100, cache: !0, data: function (e) {
                return {key: e.term}
            }, processResults: function (e) {
                var o = [];
                for (key in e) {
                    var t = new SearchResult;
                    t.id = e[key].id, t.name = e[key].name, t.bar_code = e[key].bar_code, t.selling_price = e[key].selling_price, t.supply_price = e[key].supply_price, t.currency = e[key].currency, t.model = e[key].model, t.unit = e[key].unit, o.push(t)
                }
                return {results: o}
            }
        }, templateResult: formatGoodsList, templateSelection: buyInGoodsListSelection
    }), $(".select2-selection__placeholder").text("输入 商品名称、条形码 搜索"), $(".goodsAddCodeSelect").on("select2:select", function () {
        $(".goodsAddCodeSelect").val("").trigger("change")
    })
}
function formatGoodsList(e) {
    if (console.log(e), void 0 != e.id && void 0 != e.bar_code)return '<ul class="list-unstyled"><li>条形码：' + e.bar_code + "&nbsp;&nbsp;&nbsp;&nbsp;规格：" + e.model + "&nbsp;&nbsp;&nbsp;&nbsp;单位：" + e.unit + "</li><li>商品名称：  " + e.name + "</li><li>参考销售价：&#65509;" + e.selling_price + "&nbsp;&nbsp;&nbsp;&nbsp;参考供货价：&#65509;" + e.supply_price + "&nbsp;&nbsp;&nbsp;&nbsp;币种：" + e.currency + "</li></ul>"
}
function buyInGoodsListSelection(e) {
    if (console.log(e), "" != e.id) {
        switch ($("#NewgoodsId").val(e.id), $("#Newselling_price").val(e.selling_price), $("#Newsupply_price").val(e.supply_price), e.currency) {
            case"CNY":
                $("#NewgoodsCurrency").find("option[value='CNY']").prop("selected", !0);
                break;
            case"AUD":
                $("#NewgoodsCurrency").find("option[value='AUD']").prop("selected", !0);
                break;
            case"HKD":
                $("#NewgoodsCurrency").find("option[value='HKD']").prop("selected", !0);
                break;
            case"NZD":
                $("#NewgoodsCurrency").find("option[value='NZD']").prop("selected", !0)
        }
        $("#NewgoodsBar_code").text(e.bar_code), $("#NewgoodsName").text(e.name), $("#NewgoodsModel").text(e.model), $("#NewgoodsUnit").text(e.unit)
    }
}
function orderAddSelete2Init() {
    $("tr.goodsTableTr").each(function (e, o) {
        oldMark.push($.trim($(o).find(".oldId").text())), addGoodsMark.push($.trim($(o).find(".goodsBatch").text()))
    }), console.log("旧的识别id: " + oldMark), console.log("新的识别id: " + addGoodsMark), $("tr.goodsTableTr").each(function (e, o) {
        oldMark.push($.trim($(o).find(".oldId").text()))
    }), $("#addGoodsModal .goodsAddCodeSelect").select2({
        placeholder: "输入 商品名称、条形码搜索",
        minimumInputLength: 2,
        language: "zh-CN",
        cache: !0,
        escapeMarkup: function (e) {
            return e
        },
        ajax: {
            url: goodsSearchUrl, dataType: "json", delay: 100, data: function (e) {
                return {key: e.term, depot_id: select_depot_id}
            }, processResults: function (e) {
                var o = [];
                for (key in e) {
                    var t = {};
                    t.id = key, t.bar_code = e[key].bar_code, t.product_code = e[key].product_code, t.name = e[key].name, t.model = e[key].model, t.unit = e[key].unit, t.currency = e[key].currency, t.selling_price = e[key].selling_price, t.supply_price = e[key].supply_price, t.batch = e[key].batch, o.push(t), console.log(o)
                }
                return {results: o}
            }
        },
        templateResult: formatNewOrderGoodsList,
        templateSelection: formatNewOrderGoodsListSelection
    }), $("#addGoodsModal .select2-selection__placeholder").text("输入 商品名称、条形码搜索"), $("#addGoodsModal .goodsAddCodeSelect").on("select2:select", function () {
        $("#addGoodsModal .goodsAddCodeSelect").val("").trigger("change")
    })
}
function formatNewOrderGoodsList(e) {
    if (void 0 != e.id && void 0 != e.bar_code) {
        return '<ul class="list-unstyled"><li>条形码：' + e.bar_code + "</li><li>货号：" + e.product_code + "</li><li>商品名称：  " + e.name + "</li></ul>"
    }
}
function formatNewOrderGoodsListSelection(e) {
    if (console.log(e), "" != e.id)if ("" != e.batch) {
        $("#NewgoodsBar_code").text(e.bar_code), $("#NewgoodsProduct_code").text(e.product_code), $("#NewgoodsName").text(e.name), $("#NewgoodsModel").text(e.model), $("#NewgoodsUnit").text(e.unit), $("#NewgoodsMfg").text(""), $("#NewgoodsExp").text(""), $("#Newgoodsselling_price").text(""), $("#Newgoodscurrency").text(""), $("#NewgoodsStock_false").text(""), $("#NewgoodsStock_true").text("");
        var o = e.batch;
        console.log(o), $("#NewgoodsBatch").find("option").remove().end().append('<option value="" selected="selected">选择批次号</option>').val("");
        for (var t in o)console.log(), $(o[t]).each(function (e, o) {
            console.log($(o)[0]);
            $(o)[0].mfg_date, $(o)[0].exp_date;
            var t = $(o)[0].batch_code, r = $(o)[0].id;
            $("#NewgoodsBatch").append('<option value="' + r + '">' + t + "</option>").val("")
        });
        $("#NewgoodsBatch").change(function () {
            var e = {id: $(this).val()};
            $.ajax({
                type: "POST", data: e, url: goodsBatchSearchUrl, success: function (e) {
                    e && (console.log(e), $("#NewgoodsMfg").text(e.mfg_date), $("#NewgoodsExp").text(e.exp_date), $("#Newgoodsselling_price").text(e.selling_price), $("#Newgoodscurrency").text(e.currency), $("#NewgoodsStock_false").text(e.stock_false), $("#NewgoodsStock_true").text(e.stock_true))
                }, error: function () {
                    console.warn("草泥马没有查询到数据")
                }
            })
        })
    } else AlertWarn("不能添加", "你所选定的商品没有库存！")
}
function contactSelectInit(e) {
    var o = $(".contactAddSelect");
    o.select2({
        placeholder: "输入客户信息进行搜索", minimumInputLength: 2, language: "zh-CN", cache: !0, escapeMarkup: function (e) {
            return e
        }, ajax: {
            url: e, dataType: "json", delay: 800, data: function (e) {
                return {key: e.term}
            }, processResults: function (e) {
                console.log(e);
                var o = [];
                for (var t in e) {
                    var r = {};
                    r.id = t, r.name = e[t].name, r.phone = e[t].phone, r.address = e[t].address, o.push(r), console.log(o)
                }
                return {results: o}
            }
        }, templateResult: contactSelectList, templateSelection: contactSelection
    }), o.find(".select2-selection__placeholder").text("输入客户信息进行搜索"), o.on("select2:select", function () {
        $(this).val("").trigger("change")
    })
}
function contactSelectList(e) {
    if (void 0 !== e.id) {
        return '<ul class="list-unstyled"><li>客户：' + e.name + "&nbsp;&nbsp;&nbsp;&nbsp;电话：" + e.phone + "</li><li>地址：  " + e.address + "</li></ul>"
    }
}
function contactSelection(e) {
    console.log(e), void 0 !== e.id && ($("input[name='cg_name']").val(e.name), $("input[name='cg_phone']").val(e.phone), $("input[name='cg_address']").val(e.address))
}
function orderAddPost(e, o) {
    console.log(o), $.ajax({
        type: "POST", data: e, url: o, async: !1, success: function (e) {
            orderApiSuccess(e, "请稍等 正在跳转到该订单")
        }, error: function () {
            swal("操作失败!", "网络链接失败或服务器错误!", "error")
        }
    })
}
function orderApiSuccess(e, o) {
    console.log(e);
    var t = e.code, r = e.wait, n = e.msg;
    arguments[1], 1 === t && swal({title: n, type: "success", text: arguments[1], timer: parseInt(1e3 * (r - 2)), showConfirmButton: !1}, function () {
        e.url && (window.location = e.url)
    }), 0 === t && (console.log(t), AjaxReturnZero(e))
}
function ScanApiSuccess(e, o) {
    var t = $(".packingBtn"), r = $(".packingTips");
    if (console.log(e), e.code > 0) {
        var n = 1e3 * parseInt(e.wait);
        currentProductID = e.code, r.text("本次拣货成功！").removeClass("text-red").addClass("text-green");
        var a = setTimeout(function () {
            clearTimeout(a), r.text("请进行拣货操作").removeClass("text-green").addClass("text-red"), t.prop("disabled", !1)
        }, n);
        progressWidthChange(currentProductID, o), currentProductID = null
    }
    0 == e.code && (AjaxReturnZero(e), t.prop("disabled", !1), progressWidthCalc(), orderNextCheck())
}
function orderSearchPost(e, o) {
    $.ajax({
        type: "GET", data: e, url: o, async: !1, success: function (e) {
            orderApiSuccess(e, "请稍等 正在跳转到搜索结果")
        }, error: function () {
            swal("操作失败!", "网络链接失败或服务器错误!", "error")
        }
    })
}
function progressWidthCalc() {
    $(".table .progress-bar").each(function (e, o) {
        var t = $(o).data("productpackedcount"), r = $(o).data("productcount");
        $(this).attr("style", "width:" + Math.ceil(10 * t / r * 10) + "%")
    })
}
function progressWidthChange(e, o) {
    $(".table tr[data-productID]").each(function (t, r) {
        var n = $(r).data("productid"), a = parseInt($(r).find(".progress-bar").data("productpackedcount"), 10),
            c = parseInt($(r).find(".progress-bar").data("productcount"), 10), l = $(r).find(".packedText").html();
        if (n == e) {
            if (o > c - a)return alert("范围超出"), !1;
            console.log("原来已拣货数量" + a), console.log("现在已拣货数量" + parseInt(a + o, 10)), $(r).find(".progress-bar").data("productpackedcount", a + o), $(r).find(".progress-bar").attr("data-productpackedcount", a + o), $(r).find(".packedText").html(parseInt(l, 10) + o), orderNextCheck()
        }
    }), progressWidthCalc()
}
function orderNextCheck() {
    var e = $(".table .progress-bar"), o = $(".orderNextBtn"), t = $(".packingBtn"), r = $(".packingTips");
    if (e.each(function (e, r) {
            if ($(r).data("productpackedcount") != $(r).data("productcount"))return o.addClass("scanUnFinish"), o.prop("disabled", !0), t.prop("disabled", !1), console.log("还有未完成的扫描"), !1;
            o.addClass("scanFinish"), o.prop("disabled", !1), t.prop("disabled", !0)
        }), 0 == o.prop("disabled")) {
        console.log(o.attr("disabled"));
        setTimeout(function () {
            r.text("已完成所有商品拣货").removeClass("text-red").addClass("text-green"), t.attr("disabled", !o.attr("disabled"))
        }, 2e3)
    }
}
function scanPost(e, o, t) {
    console.log("进行拣货Post");
    var r = $(".packingBtn"), n = $(".packingTips");
    $.ajax({
        type: "POST", url: o, data: e, success: function (e) {
            ScanApiSuccess(e, t), $(".scanCode").val("")
        }, error: function (e) {
            var o = 1e3 * parseInt(e.wait);
            n.text("本次拣货失败！");
            var t = setTimeout(function () {
                clearTimeout(t), n.text("请进行拣货操作"), r.prop("disabled", !1)
            }, o);
            AlertError("操作失败!", "网络链接失败 或 服务器错误!"), $(".scanCode").val("")
        }
    })
}
function goodsAddModalClear() {
    var e = $("#NewgoodsRate").val();
    $("#addGoodsModal .form-group div label").text(""), $("#addGoodsModal .form-group div input").val(""), $("#NewgoodsRate").val(e), $("#NewgoodsBatch").find("option").remove().end().append('<option value="" selected>请选择批次号</option>').val("whatever")
}
function purchaseAddclear() {
    var e = $("#NewgoodsRate").val();
    $("form.purchaseAddOne .row:last input").each(function (e, o) {
        $(o).val("")
    }), $("form.purchaseAddOne .row:last .form-group div label").each(function (e, o) {
        $(o).text("")
    }), $("form.purchaseAddOne input#NewgoodsNum").val(""), $("#NewgoodsRate").val(e)
}
function formClear(e) {
    console.log(e), $(e).find(".form-group div input[type='text']").val(""), $(e).find(".form-group div input[type='radio']").prop("checked", !1), $(e).find(".form-group div select").val("").trigger("change"), $(e).find(".form-group div input[type='radio']").iCheck("uncheck"), console.log("InputClear")
}
function formInputClear(e) {
    console.log(e), $(e).find(".form-group div input").val(""), $(e).find(".form-group div select").val("").trigger("change"), $(e).find(".form-group div label").text(""), console.log("InputClear")
}
function userAddSelectInit(e) {
    userAddSelect.select2({
        placeholder: "输入要关联的业务员名称", language: "zh-CN", minimumResultsForSearch: 1 / 0, cache: !0, escapeMarkup: function (e) {
            return e
        }, data: e
    })
}
function UserListSetSelect(e) {
    if (console.log(e), 0 === e.length)return !1;
    var o = [];
    for (var t in e)o.push(Number(t));
    userEditSelect.val(o).trigger("change")
}
function userRatingSetting(e, o) {
    $.post(contactSetRatingUrl, {id: e, number: o}, function () {
    }).error(function () {
        AlertError("操作失败!", "网络链接失败 或 服务器错误!", function () {
            location.reload(!0)
        })
    })
}
var checkForm = $(".box-body form "), addOrderBtn = $("#addOrderBtn"), confirmNewOrderBtn = $(".confirmNewOrderBtn"),
    orderCodeSearchBtn = $("#orderCodeSearchBtn"), orderPrevBtn = $(".orderPrevBtn"), orderNextBtn = $(".orderNextBtn"), orderEditBtn = $(".orderEditBtn"),
    orderEditConfirmBtn = $(".orderEditConfirmBtn"), SearchBtn = $("#SearchBtn"), SearchDatePicker = $(".SearchDatePicker"),
    SearchMonthPicker = $(".SearchMonthPicker"), resetPasswordModal = $("#resetPasswordModal"), resetPasswordBtn = $(".resetPasswordBtn"),
    resetPasswordConfirmBtn = $(".resetPasswordConfirmBtn"), checkAllBtn = $("#checkAllBtn"), checkAllBtnFalse = $("#checkAllBtnFalse"),
    AllcheckBox = $("table td input[type=checkbox]"), checkAllStatus = !0, checkAllStatusFalse = !1;
checkAllBtn.on("click", function () {
    checkAllStatus ? (AllcheckBox.each(function () {
        $(this).prop("checked", !1)
    }), checkAllStatus = !checkAllStatus) : (AllcheckBox.each(function () {
        $(this).prop("checked", !0)
    }), checkAllStatus = !checkAllStatus)
}), checkAllBtnFalse.on("click", function () {
    checkAllStatusFalse ? (AllcheckBox.each(function () {
        $(this).prop("checked", !1)
    }), checkAllStatusFalse = !checkAllStatusFalse) : (AllcheckBox.each(function () {
        $(this).prop("checked", !0)
    }), checkAllStatusFalse = !checkAllStatusFalse)
});
var orderImageUploadBtn = $("#orderImageUploadBtn"), imgFile = $("#imgFile"), orderImage = $("#orderImage"), lookImageBtn = $("#lookImageBtn");
imgFile.change(function () {
    var e = $(this).val().split("."), o = e[e.length - 1];
    console.log(o), "jpg" !== o && "png" !== o && "JPG" !== o ? (AlertWarn("无效的文件", "选择文件的格式不正确"), $(this).val()) : (orderImageUploadBtn.click(), readURL(this))
}), orderImageUploadBtn.click(function () {
    if (void 0 === imgFile[0].files[0])return AlertWarn("不能上传", "未选择流水凭证图"), $(this).prop("disabled", !1), !1;
    var e = new FormData;
    e.append("img", imgFile[0].files[0]);
    var o = originFormPost(e, orderImageUrl, this);
    o.success(function (e) {
        swal("完成!", "流水凭证图已上传成功", "success"), orderImage.attr("src", e), lookImageBtn.attr("href", e), console.log(e)
    }), o.error(function () {
        swal("失败!", "请重新上传", "error")
    })
}), lookImageBtn.click(function () {
    if ("#" == $(this).attr("href") || "" == $(this).attr("href"))return AlertWarn("缺失凭证图", "你还没有上传流水凭证图！"), !1
});
var orderGoodsAddBtn = $(".orderGoodsAddBtn"), goodsEditBtn = $(".goodsEditBtn"), addGoodsTips = $(".addGoodsTips"),
    goodsAddContinueBtn = $(".goodsAddContinueBtn, .goodsAddSaveBtn"), goodsEditConfirmBtn = $(".goodsEditConfirmBtn"),
    singleSubOrderBtn = $("#singleSubOrderBtn"), multiSubOrderBtn = $("#multiSubOrderBtn"), buyInAddBtn = $(".buyInAddBtn");
Array.prototype.remove = function (e) {
    var o = this.indexOf(e);
    o > -1 && this.splice(o, 1)
};
var OrderOfGoodsList = function () {
};
OrderOfGoodsList.prototype = {order_id: null, ids: []}, SearchResult.prototype = {};
var goodsdata = function () {
};
goodsdata.prototype = {orderId: null, productCode: null, productName: null, productQty: null, productId: null};
var orderSearchData = function () {
};
orderSearchData.prototype = {min_date: "", max_date: "", order_code: "", url: ""};
var subOrderData = function () {
};
subOrderData.prototype = {ids: []}, IsSelect.prototype.ids = [];
var packData = function () {
};
packData.prototype = {order_id: null, bar_code: null, qty: 1};
var navData = function () {
};
navData.prototype = {id: null, name: null, url: null, pid: null, sequence: null, hide: null};
var purchaseAddData = function () {
};
purchaseAddData.prototype = {};
var purchaseAddOneData = function () {
};
purchaseAddOneData.prototype = {};
var newOrderData = function () {
};
newOrderData.prototype = {
    order_code: null,
    cg_name: null,
    cg_number: null,
    cg_phone: null,
    cg_province: null,
    cg_city: null,
    cg_area: null,
    cg_address: null,
    goods: []
};
var editOrderData = function () {
};
editOrderData.prototype = {
    order_id: null,
    order_code: null,
    cg_name: null,
    cg_number: null,
    cg_phone: null,
    cg_province: null,
    cg_city: null,
    cg_area: null,
    cg_address: null,
    goods: []
};
var OrderGoodsData = function () {
};
OrderGoodsData.prototype = {product_code: null, qty: null};
var AlertText = {yes: "是", no: "否", userInfoEdit: ["修改员工信息", "确定要修改员工信息吗"], userResetPw: ["重置密码", "你确定要重置员工 ", " 的密码为：  "]};
!function () {
    currencyQueryBtn();
    var e = parseURL(location.href).params;
    if ($.isEmptyObject(e)); else {
        if (!($(".SearchKey").length > 0))return !1;
        var o = e;
        for (var t in o) {
            var r = t, n = o[t];
            $(".SearchKey [name=" + r + "]").is("input") && $(".SearchKey [name=" + r + "]").val(decodeURIComponent(n)), $(".SearchKey [name=" + r + "]").is("select") && $(".SearchKey [name=" + r + "] option").each(function (e, o) {
                $(o).val() == n && $(o).prop("selected", !0)
            })
        }
    }
    if (SearchBtn.click(function () {
            var e = "", o = 0, t = $(".SearchKey");
            t.find("input").each(function (t, r) {
                "" != $(r).val() && (e += 0 == o ? "?" : "&", o++, e += $(r).prop("name") + "=" + $(r).val())
            }), t.find("select").each(function (t, r) {
                "" != $(r).val() && (e += 0 == o ? "?" : "&", o++, e += $(r).prop("name") + "=" + $(r).val())
            }), location.href = "" == e ? parseURL(location.href).path : e
        }), resetPasswordBtn.click(function () {
            resetPasswordModal.modal({backdrop: "static"})
        }), resetPasswordConfirmBtn.click(function () {
            formPost($("form.resetPassword").serialize(), resetPasswordUrl)
        }), SearchDatePicker.length > 0 && SearchDatePicker.datepicker({
            format: "yyyy-mm-dd",
            language: "zh-CN",
            keepEmptyValues: !0,
            orientation: "bottom auto"
        }), SearchMonthPicker.length > 0 && SearchMonthPicker.datepicker({
            format: "yyyy-mm",
            language: "zh-CN",
            keepEmptyValues: !0,
            orientation: "bottom auto",
            startView: 1,
            minViewMode: 1,
            maxViewMode: 1
        }), $(".user.dropdown").hover(function () {
            $(this).addClass("open")
        }, function () {
            $(this).removeClass("open")
        }), $(".RowCurrency").length) {
        var a = null;
        $(".currencyCountInsert.purchase").length && (a = "purchase"), $(".currencyCountInsert.order").length && (a = "order"), currencyTotalCount(a)
    }
}(), orderPrevBtn.click(function () {
    var e = $(this).prop("class").toString();
    if ($(this).hasClass("single")) {
        console.log("单个删除");
        var o = $(this).data("orderid");
        switch (!0) {
            case/(orderVerify)/.test(e):
                swal({
                    title: "驳回订单",
                    text: "请填写驳回订单的原因",
                    confirmButtonText: "确认",
                    cancelButtonText: "取消",
                    type: "input",
                    showCancelButton: !0,
                    closeOnConfirm: !1,
                    animation: "slide-from-top",
                    inputPlaceholder: ""
                }, function (e) {
                    if (!1 === e)return !1;
                    if ("" === e)return swal.showInputError("还没填写驳回原因!"), !1;
                    var t = new IsSelect;
                    t.ids.push(o), t.desc = e.toString(), formPost(jQuery.param(t), orderRevUrl)
                });
                break;
            case/(orderBarn)/.test(e):
                break;
            case/(navDel)/.test(e):
                AlertConfirm("删除导航?", "删除导航?", "删除", function () {
                    var e = new IsSelect;
                    e.id = o, console.log(e), formPost(jQuery.param(e), navDelUrl)
                });
                break;
            case/(barnDel)/.test(e):
                AlertConfirm("删除栏目?", "删除栏目?", "删除", function () {
                    var e = new IsSelect;
                    e.id = o, console.log(e), formPost(jQuery.param(e), barnDelUrl)
                });
                break;
            case/(buyIn)/.test(e):
                AlertConfirm("删除采购入库单?", "删除采购入库单?", "删除", function () {
                    var e = new IsSelect;
                    e.id = o, console.log(e), formPost(jQuery.param(e), buyInDelUrl)
                });
                break;
            case/(purchaseVerify)/.test(e):
                swal({
                    title: "驳回入库单",
                    text: "请填写驳回入库单的原因",
                    confirmButtonText: "确认",
                    cancelButtonText: "取消",
                    type: "input",
                    showCancelButton: !0,
                    closeOnConfirm: !1,
                    animation: "slide-from-top",
                    inputPlaceholder: ""
                }, function (e) {
                    if (!1 === e)return !1;
                    if ("" === e)return swal.showInputError("还没填写驳回原因!"), !1;
                    var t = {};
                    t.id = o, t.desc = e.toString(), formPost(jQuery.param(t), purchaseVerifyBackUrl)
                });
                break;
            case/(purchaseDel)/.test(e):
                AlertConfirm("删除入库单?", "确定要删除入库单?", "删除", function () {
                    var e = new IsSelect;
                    e.id = o, console.log(e), formPost(jQuery.param(e), purchaseDelUrl)
                });
                break;
            case/(backOrderDie)/.test(e):
                AlertConfirm("作废订单?", "确定要作废订单?", "作废", function () {
                    var e = new IsSelect;
                    e.id = o, console.log(e), formPost(jQuery.param(e), backOrderDieUrl)
                });
                break;
            case/(contacts)/.test(e):
                AlertConfirm("删除客户?", "确定要删除客户?", "删除", function () {
                    var e = new IsSelect;
                    e.ids = o, console.log(e), formPost(jQuery.param(e), contactDelUrl)
                });
                break;
            case/(Supplier)/.test(e):
                AlertConfirm("删除供应商?", "确定要删除供应商?", "删除", function () {
                    var e = new IsSelect;
                    e.ids = o, console.log(e), formPost(jQuery.param(e), SupplierDelUrl)
                });
                break;
            default:
                AlertConfirm("你确定要删除该订单吗?", "你确定要删除该订单吗?", "删除", function () {
                    var e = new IsSelect;
                    e.ids.push(o), formPost(jQuery.param(e), orderDelUrl)
                })
        }
    } else switch (console.log("checkbox选择删除"), !0) {
        case/(orderVerify)/.test(e):
            if ("" == $("td input[type='checkbox']").serialize())return void AlertWarn("你还没有选择要驳回的订单!", "你还没有选择要驳回的订单!");
            swal({
                title: "驳回订单",
                text: "请填写驳回订单的原因",
                type: "input",
                showCancelButton: !0,
                closeOnConfirm: !1,
                animation: "slide-from-top",
                inputPlaceholder: ""
            }, function (e) {
                if (!1 === e)return !1;
                if ("" === e)return swal.showInputError("还没填写驳回原因!"), !1;
                var o = new IsSelect;
                $("td input[type='checkbox']:checked").each(function (e, t) {
                    o.ids.push($(t).val())
                }), o.desc = e.toString(), formPost(jQuery.param(o), orderRevUrl)
            });
            break;
        case/(orderBarn)/.test(e):
            if ("" == checkForm.serialize())return void AlertWarn("你还没有选择要驳回的订单!", "你还没有选择要驳回的订单!");
            swal({
                title: "驳回订单",
                text: "请填写驳回订单的原因",
                confirmButtonText: "确认",
                cancelButtonText: "取消",
                type: "input",
                showCancelButton: !0,
                closeOnConfirm: !1,
                animation: "slide-from-top",
                inputPlaceholder: ""
            }, function (e) {
                if (!1 === e)return !1;
                if ("" === e)return swal.showInputError("还没填写驳回原因!"), !1;
                var o = new IsSelect;
                $("td input[type='checkbox']:checked").each(function (e, t) {
                    o.ids.push($(t).val())
                }), o.desc = e.toString(), formPost(jQuery.param(o), orderRevUrl)
            });
            break;
        case/(contacts)/.test(e):
            if ("" == checkForm.serialize())return void AlertWarn("你还没有选择要删除的客户!", "你还没有选择要删除的客户!");
            AlertConfirm("你确定要批量删除客户吗？", "你确定要批量删除客户吗？", "删除", function () {
                formPost(checkForm.serialize(), contactDelUrl)
            });
            break;
        case/(Supplier)/.test(e):
            if ("" == checkForm.serialize())return void AlertWarn("你还没有选择要删除的供应商!", "你还没有选择要删除的供应商!");
            AlertConfirm("你确定要批量删除供应商吗？", "你确定要批量删除供应商吗？", "删除", function () {
                formPost(checkForm.serialize(), SupplierDelUrl)
            });
            break;
        default:
            if ("" == checkForm.serialize())return void AlertWarn("你还没有选择要删除订单!", "你还没有选择要删除订单!");
            AlertConfirm("你确定要批量删除订单吗？", "你确定要批量删除订单吗？", "删除", function () {
                formPost(checkForm.serialize(), orderDelUrl)
            })
    }
}), orderNextBtn.click(function () {
    var e = $(this).prop("class").toString();
    if ($(this).hasClass("single")) {
        console.log("单个提交");
        var o = $(this).data("orderid");
        switch (!0) {
            case/(orderVerify)/.test(e):
                console.log("审核订单"), AlertConfirm("审核订单", "你确定要审核该订单吗？", "审核", function () {
                    var e = new IsSelect;
                    e.ids.push(o), formPost(jQuery.param(e), orderVerUrl)
                });
                break;
            case/(orderSupply)/.test(e):
                console.log("下发订单"), AlertConfirm("你确定要下发订单吗？", "你确定要下发订单吗？", "下发", function () {
                    var e = new IsSelect;
                    e.ids.push(o), formPost(jQuery.param(e), orderSupUrl)
                });
                break;
            case/(orderBarn)/.test(e):
                console.log("栏目审核订单"), AlertConfirm("栏目确定要审核订单吗？", "栏目确定要审核订单吗？", "审核", function () {
                    var e = new IsSelect;
                    e.ids.push(o), formPost(jQuery.param(e), orderVerUrl)
                });
                break;
            case/(navAdd)/.test(e):
                console.log("新增导航"), AlertConfirm("要新增一个导航吗？", "要新增一个导航吗？", "新增", function () {
                    var e = $("form.navAdd").serialize();
                    console.log(e), formPost(e, navAddUrl)
                });
                break;
            case/(orderPack)/.test(e):
                console.log("栏目拣货"), AlertConfirm("拣货完成", "确定要完成该订单的拣货吗？", "是", function () {
                    formPost(jQuery.param({id: o}), orderPackNextUrl)
                });
                break;
            case/(orderShip)/.test(e):
                console.log("栏目发货"), AlertConfirm("发货", "确定要完成该订单的发货吗？", "是", function () {
                    formPost(jQuery.param({ids: o}), orderSendUrl)
                });
                break;
            case/(inventoryVerify)/.test(e):
                console.log("入库审批"), AlertConfirm("入库审批", "确定要审批该入库记录吗？", "是", function () {
                    formPost(jQuery.param({id: o}), inventoryVerifyUrl)
                });
                break;
            case/(goodsVerify)/.test(e):
                console.log("入库审核单 商品审核"), AlertConfirm("商品审核", "确定要审核该商品吗？", "是", function () {
                    formPost(jQuery.param({id: o}), goodsVerifyUrl)
                });
                break;
            case/(backOrderSub)/.test(e):
                console.log("驳回订单的订单重新提交"), AlertConfirm("提交订单", "确定要重新提交该订单吗？", "是", function () {
                    formPost(jQuery.param({id: o}), backOrderSubUrl)
                });
                break;
            case/(purchaseVerify)/.test(e):
                console.log("审核商品入库"), AlertConfirm("审核商品入库", "确定要审核商品入库吗？", "是", function () {
                    formPost(jQuery.param({id: o}), purchaseVerifyUrl)
                });
                break;
            case/(activePurchase)/.test(e):
                console.log("入库单单个商品更改为未完成"), AlertConfirm("更改商品状态", "确定要更改商品为未完成吗？", "是", function () {
                    formPost(jQuery.param({id: o}), activationUrl)
                });
                break;
            case/(groupPerm)/.test(e):
                console.log("员工组修改"), AlertConfirm("员工组修改", "确定要修改该员工组权限吗？", "是", function () {
                    var e = {id: null, rule: []};
                    e.id = $(".userGroupPermid").val(), $('form input[type="checkbox"]:checked').each(function () {
                        e.rule.push($(this).val())
                    }), console.log(e), formPost(e, groupPermEditUrl)
                });
                break;
            default:
                console.log("上传提交"), AlertConfirm("你确定要提交订单吗？", "你确定要提交订单吗？", "提交", function () {
                    var e = new IsSelect;
                    e.ids.push(o), formPost(jQuery.param(e), orderSubUrl)
                })
        }
    } else switch (console.log("checkbox选择提交"), console.log(checkForm.serialize()), !0) {
        case/(orderVerify)/.test(e):
            if ("" == checkForm.serialize())return void AlertError("你还没有选择要审核的订单!", "你还没有选择要审核的订单!");
            AlertConfirm("你确定要批量审核订单？", "你确定要批量审核订单？", "审核", function () {
                formPost(checkForm.serialize(), orderVerUrl)
            });
            break;
        case/(orderSupply)/.test(e):
            if ("" == checkForm.serialize())return void AlertError("你还没有选择要下发的订单!", "你还没有选择要下发的订单!");
            AlertConfirm("你确定要批量下发订单？", "你确定要批量下发订单？", "下发", function () {
                formPost(checkForm.serialize(), orderSupUrl)
            });
            break;
        case/(orderBarn)/.test(e):
            if ("" == checkForm.serialize())return void AlertError("你还没有选择要审核的订单!", "你还没有选择要审核的订单!");
            AlertConfirm("栏目确定要批量审核订单？", "栏目确定要批量审核订单？", "审核", function () {
                formPost(checkForm.serialize(), orderVerUrl)
            });
            break;
        case/(orderShip)/.test(e):
            console.log("批量栏目发货"), AlertConfirm("发货", "确定要完成该订单的发货吗？", "是", function () {
                formPost(checkForm.serialize(), orderSendUrl)
            });
            break;
        default:
            if ("" == checkForm.serialize())return void AlertError("你还没有选择要提交订单!", "你还没有选择要提交订单!");
            AlertConfirm("你确定要批量提交订单？", "你确定要批量提交订单？", "提交", function () {
                formPost(checkForm.serialize(), orderSubUrl)
            })
    }
}), $(".goodsAddOneDel").click(function () {
    var e = $.trim($(this).closest("tr").find(".goodsBatch").text());
    console.log("要删除的商品：" + e), addGoodsMark.remove(e.toString()), $(this).closest("tr").remove(), console.log(addGoodsMark)
}), goodsAddContinueBtn.click(function () {
    $(this).prop("disabled", !0);
    var e, o = !0, t = $.trim($("#NewgoodsBatch").val()), r = Number($("#NewgoodsNum").val()), n = $("#NewgoodsCurrency").val(), a = $("#NewgoodsRate").val(),
        c = Number($("#Newgoodsselling_price").val());
    if ("" !== $("#NewgoodsBar_code").text()) {
        if (o = 0 == addGoodsMark.length, console.log("当前批次识别号为" + t), "" == t)return AlertWarn("请先选择商品批次号！", ""), goodsAddContinueBtn.prop("disabled", !1), !1;
        if (!isInteger(r) || r <= 0)return AlertWarn("填写有误", "请准确填写该商品的数量！"), goodsAddContinueBtn.prop("disabled", !1), !1;
        if (!Number(a) || r <= 0)return AlertWarn("填写有误", "请准确填写汇率！"), goodsAddContinueBtn.prop("disabled", !1), !1;
        if (!Number(c) || c <= 0)return AlertWarn("填写有误", "请准确填写该商品的销售价！"), goodsAddContinueBtn.prop("disabled", !1), !1;
        if ("" === n)return AlertWarn("填写有误", "请选择该商品的币种！"), goodsAddContinueBtn.prop("disabled", !1), !1;
        $(addGoodsMark).each(function (r, n) {
            if (n == t)return o = !1, e = $("#NewgoodsName").text(), console.log("发现相同的商品"), !1;
            o = !0, console.log("未发现相同的商品")
        }), console.log(o), o ? ($(function () {
            return '<tr class="goodsTableTr"><td style="display: none;" class="goodsBatch">' + $("#NewgoodsBatch").val() + '</td><td style="display: none;" class="product_code">' + $("#NewgoodsProduct_code").text() + "</td><td>" + $("#NewgoodsName").text() + '</td><td class="batch_code">' + $("#NewgoodsBatch option:selected").text() + "</td><td>" + $("#NewgoodsProduct_code").text() + "</td><td>" + $("#NewgoodsBar_code").text() + '</td><td class="selling_price">' + Number($("#Newgoodsselling_price").val()).toFixed(2) + '</td><td class="currency">' + $("#NewgoodsCurrency").val() + '</td><td class="CNY_rate">' + Number($("#NewgoodsRate").val()).toFixed(4) + '</td><td class="amount">' + Number($("#NewgoodsNum").val()) + "</td><td>" + $("#NewgoodsModel").html() + "</td><td>" + $("#NewgoodsUnit").html() + '</td><td><a href="javascript:void(0);" class="text-danger goodsAddOneDel"><i class="fa fa-trash fa-fw"></i>删除</a></td></tr>'
        }()).appendTo($("tbody.goodsTable")), goodsAddModalClear(), addGoodsMark.push(t), console.log(addGoodsMark), $(".goodsAddOneDel").click(function () {
            var e = $.trim($(this).closest("tr").find(".goodsBatch").text());
            console.log("要删除的商品：" + e), addGoodsMark.remove(e.toString()), $(this).closest("tr").remove(), console.log(addGoodsMark)
        }), $(this).hasClass("goodsAddSaveBtn") ? (goodsAddModalClear(), $("#addGoodsModal").modal("hide"), $(this).prop("disabled", !1)) : (goodsAddModalClear(), addGoodsTips.show().delay(3e3).fadeOut(), $(this).prop("disabled", !1))) : (AlertWarn("列表中已有重复的商品", e), goodsAddContinueBtn.prop("disabled", !1), console.log(e))
    } else AlertWarn("请先搜索", "请先搜索选择商品后才能添加！"), goodsAddContinueBtn.prop("disabled", !1)
}), $(".NewOrderGoodsSingleDel").click(function () {
    var e = $.trim($(this).closest("tr").find(".OrderGoods").html());
    console.log("要删除的商品：" + e), addGoodsMark.remove(e.toString()), $(this).closest("tr").remove(), console.log(addGoodsMark)
}), $(".newOrderInfo select[name='depot_id'], .editOrderInfo select[name='depot_id']").on("focus", function () {
    old_select_depot_id = $(this).val(), console.log("旧的值是： " + old_select_depot_id)
}).change(function () {
    if ("" == old_select_depot_id)return !1;
    var e = $(this);
    select_depot_id = $(this).val(), console.log("新的值是： " + select_depot_id), AlertConfirm("切换栏目", "切换栏目后该订单的数据不会被保存，你确定要这样吗做吗？", "切换", function () {
        ClearTable("tbody.goodsTable tr:first"), swal.close()
    }, function () {
        $(e).val(old_select_depot_id), swal.close()
    })
}), orderEditBtn.click(function () {
    $("#modOrderModal").modal({backdrop: "static"}), $("#modOrderModal").find("input").on("keydown", function (e) {
        13 == e.keyCode && orderEditConfirmBtn.click()
    }), provinceSelect.on("select2:select", function (e) {
        console.log(loc.commit), $("[name='cg_province']").val($("#loc_province").select2("data")[0].text.toString()), loc.commit = !1
    }), citySelect.on("select2:select", function (e) {
        console.log(loc.commit), $("[name='cg_city']").val($("#loc_city").select2("data")[0].text.toString()), loc.commit = !1
    }), areaSelect.on("select2:select", function (e) {
        console.log(loc.commit), $("[name='cg_area']").val($("#loc_town").select2("data")[0].text.toString()), loc.commit = !0
    })
}), orderEditConfirmBtn.click(function () {
    if (loc.commit) {
        var e = $("form.OrderEdit").serialize();
        console.log(e), swal({
            title: "确认修改该订单吗?",
            text: "确认修改该订单吗?",
            type: "warning",
            showCancelButton: !0,
            confirmButtonColor: "#DD6B55",
            confirmButtonText: "修改",
            closeOnConfirm: !1
        }, function () {
            orderAddPost(e, orderEditUrl)
        })
    } else swal("", "请填写省市区!", "error"), console.log($("#loc_province").select2("data")[0].text), console.log($("#loc_city").select2("data")[0].text), console.log($("#loc_town").select2("data")[0].text)
});